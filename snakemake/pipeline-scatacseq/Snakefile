#!/usr/bin/env python
import os
from glob import glob
from snakemake.utils import format


def fastq_files():
    return glob(os.path.join(config["fastq_dir"], "*.f*q"))


def fastq_names():
    return [os.path.splitext(os.path.basename(fastq_file))[0] for fastq_file in fastq_files()]


def fastq_common_names_paired():
    basenames = {os.path.splitext(fastq_file)[0] for fastq_file in fastq_files()}
    paired_candidates = [basename[:-2] for basename in basenames if basename[-2:] == "_1"]
    return [os.path.basename(common_name) for common_name in paired_candidates if common_name + "_2" in basenames]


def fastq_names_single():
    common_names = fastq_common_names_paired()
    return [fastq_name for fastq_name in fastq_names()
            if fastq_name[-2:] not in ["_1", "_2"] or fastq_name[:-2] not in common_names]


def fastq_aligned_names():
    return fastq_common_names_paired() + fastq_names_single()


workdir: config["work_dir"]


rule fastqc:
    input:
        os.path.join(config["fastq_dir"], "{sample}.fastq")
    output:
        html="qc/fastqc/{sample}.html",
        zip="qc/fastqc/{sample}.zip"
    params: ""
    log:
        "logs/fastqc/{sample}.log"
    wrapper:
        "0.31.1/bio/fastqc"


rule trim_adapters:
    input:
        r1=os.path.join(config["fastq_dir"], "{sample}_1.fastq"),
        r2=os.path.join(config["fastq_dir"], "{sample}_2.fastq")
    output:
        r1="trimmed/{sample}_1.fastq.gz",
        r2="trimmed/{sample}_2.fastq.gz",
        r1_unpaired="trimmed/{sample}_1_unpaired.fastq.gz",
        r2_unpaired="trimmed/{sample}_2_unpaired.fastq.gz"
    params:
        trimmer=["TRAILING:3", "SLIDINGWINDOW:4:15", "MINLEN:25",
                 "ILLUMINACLIP:adapter/NextSeq500.fa:2:30:10:1:true"],
        extra="-phred33"
    log: "logs/trimmomatic/{sample}.log"
    wrapper: "0.31.1/bio/trimmomatic/pe"


rule all:
    input:
        expand("trimmed/{sample}.fastq.gz", sample=fastq_names()),
        expand("qc/fastqc/{sample}.html", sample=fastq_names())
    shell: 'echo {input}'