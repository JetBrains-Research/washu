#!/usr/bin/env python

from glob import glob;
import os;


def fastq_files(wildcards):
    return glob(os.path.join(config["fastq_dir"], "*.f*q"))


def fastq_names(wildcards):
    return [os.path.splitext(os.path.basename(fastq_file))[0] for fastq_file in fastq_files(wildcards)]


def expect_files(wildcards, directory, extension):
    return [os.path.join(directory, "{}.{}".format(filename, extension)) for filename in fastq_names(wildcards)]


rule all:
    input: lambda wildcards: expect_files(wildcards, os.path.join(config["work_dir"], "fastqc"), "html")
    shell: 'echo {input}'


rule fastqc:
    input: os.path.join(config["fastq_dir"], "{sample}.fastq")
    output: os.path.join(config["work_dir"], "fastqc", "{sample}.html")
    params:
        output_dir=lambda wildcards, output: os.path.dirname(str(output))
    shell: 'fastqc --outdir "{params.output_dir}" "{input}"'


rule index_bowtie:
    input: directory(os.path.join(config["work_dir"], "fa"))
    output: directory(os.path.join(config["work_dir"], "indexes"))
    params:
        files_list=lambda wildcards, input: ','.join(glob("{}/*.fa".format(input))),
        target=lambda wildcards, output: os.path.join(str(output), config["genome"])
    shell: 'mkdir -p {output} && '
           'bowtie-build {params.files_list} {params.target}'


rule download_chrom_sizes:
    output: os.path.join(config["work_dir"], "fa", "{}.chrom.sizes".format(config["genome"]))
    shell: 'wget -nc http://hgdownload.cse.ucsc.edu/goldenPath/{config[genome]}/bigZips/{config[genome]}.chrom.sizes'


rule download_fa:
    output: directory(os.path.join(config["work_dir"], "fa"))
    shell: 'rsync -avzP --exclude="*.txt" rsync://hgdownload.cse.ucsc.edu/goldenPath/{config[genome]}/chromosomes/ {output} && '
           'gunzip -f {output}/*.fa.gz'

